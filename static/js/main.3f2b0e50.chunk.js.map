{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","components/Palette.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","_ref","palette","form","children","react_default","a","createElement","className","Form","color","value","onChange","onCreate","onKeyPress","style","onClick","TodoItem","nextProps","nextState","this","props","checked","_this$props","text","id","onToggle","onRemove","console","log","e","stopPropagation","concat","Component","TodoItemList","todos","todoList","map","src_components_TodoItem","key","Palette","colors","colorsList","index","background","App","state","input","handleChange","_this","setState","target","handleCreate","_this$state","handleKeyPress","handleToggle","findIndex","todo","selected","nextTodos","Object","toConsumableArray","objectSpread","handleRemove","filter","handleColorChange","changedColor","_this$state2","src_components_TodoListTemplate","src_components_Palette","src_components_Form","components_TodoItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f2b0e50.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({palette, form, children}) => {\r\n    return(\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                이재완의 React Todo List\r\n            </div>\r\n            <section className=\"palette-wrapper\">\r\n                {palette}\r\n            </section>\r\n            <section className=\"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            <section className=\"todos-wrapper\">\r\n                {children}\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TodoListTemplate;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({color, value, onChange, onCreate, onKeyPress}) => {\r\n    return (\r\n        <div className=\"form\">\r\n            <input style={{ color: color }} value= {value} onChange={onChange} onKeyPress={onKeyPress}/>\r\n            <div className=\"create-button\" onClick={onCreate}>\r\n                추가\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    render() {\r\n        const {color, text, checked, id, onToggle, onRemove } = this.props;\r\n        console.log(id);\r\n        \r\n        return (\r\n            <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    // onToggle 실행 방지\r\n                    e.stopPropagation();\r\n                    onRemove(id)}    \r\n                } >&times;</div>\r\n                <div className={`todo-text ${checked && 'checked'}`}>\r\n                    <div style={{ color: color }}>{text}</div>\r\n                </div>\r\n                {\r\n                    checked && ( < div className = \"check-mark\" > ✓ </div>)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n    render() {\r\n        const {color, todos, onToggle, onRemove} = this.props;\r\n        const todoList = todos.map(\r\n            ({id, text, checked}) => (\r\n                <TodoItem\r\n                    color={color}\r\n                    id={id}\r\n                    text={text}\r\n                    checked={checked}\r\n                    onToggle={onToggle}\r\n                    onRemove={onRemove}\r\n                    key={id}\r\n                />\r\n\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItemList;","import React, { Component } from 'react';\r\nimport './Palette.css';\r\n\r\n\r\nclass Palette extends Component {\r\n    render() {\r\n        const {colors, onToggle} = this.props;\r\n        console.log(colors);\r\n\r\n        const colorsList = colors.map(\r\n            (color, index) => (\r\n                <div className=\"color\" style={{ background: color }} \r\n                    key={index}\r\n                    onClick={() => onToggle(index)}>\r\n                    \r\n                </div>\r\n            )\r\n        )\r\n        return (\r\n            <div className=\"palette\">\r\n                {colorsList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Palette;","import React, { Component } from 'react';\nimport './App.css';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nimport Palette from './components/Palette';\n\n\nclass App extends Component {\n  id = 4;\n  colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6'];\n\n  state = {\n    color: '#343a40',\n    input: '',\n    todos: [\n      { id:0, text: 'Component 직접 구성하기',  checked: true},\n      { id:1, text: 'props 전달하기',  checked: true},\n      { id:2, text: 'status 상태관리하기',  checked: true},\n      { id:3, text: 'redux 적용하기',  checked: false}\n      \n    ]\n  }\n\n  //change 이벤트 핸들러\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value\n    })\n  }\n\n  //Create 이벤트 핸들러\n  handleCreate = () => {\n    const { input, todos } = this.state;\n    this.setState({\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false\n      }),\n      //인풋 초기화\n      input: ''\n    });\n  }\n\n  handleKeyPress = (e) => {\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  //체크\n  handleToggle = (id) => {\n    const {todos} = this.state;\n\n    //id(parameter)로 몇번째인지 index 찾기\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];\n    \n    const nextTodos = [...todos];\n\n    //체크만 반전\n    nextTodos[index] = {\n      ...selected,\n      checked: !selected.checked\n    };\n    \n    this.setState({\n      todos: nextTodos\n    });\n\n  }\n  handleRemove = (id) => {\n    const {todos} = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  handleColorChange = (id) => {\n    const changedColor = this.colors[id];\n    this.setState({\n      color: changedColor\n    });\n    console.log('a');\n    console.log(this.state.color);\n    \n  }\n\n  render() {\n    const { color, input, todos } = this.state;\n    const {colors} = this;\n    \n    \n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove,\n      handleColorChange\n    } = this;\n\n    return (\n      <TodoListTemplate \n        palette= {(\n          <Palette\n            colors={colors}\n            onToggle={handleColorChange}\n          />\n        )}  \n        form={(\n          <Form\n            color={color} \n            value={input}\n            onKeyPress={handleKeyPress}\n            onChange={handleChange}\n            onCreate={handleCreate}\n          />\n      )}>\n        <TodoItemList\n          color={color} \n          todos={todos} \n          onToggle={handleToggle} \n          onRemove={handleRemove}\n        />\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}